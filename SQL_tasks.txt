Задание №1 - Выбор и фильтрация данных, запрос SELECT

    1. Написать запрос для выбора студентов в порядке их регистрации.

SELECT name FROM students ORDER BY registration_date;

    2. Написать запрос для выбора 5 самых дорогих курсов, на которых более 4 студентов, и которые длятся более 10 часов.

SELECT name AS course_name FROM courses WHERE students_count > 4 AND duration > 10 ORDER BY price DESC LIMIT 5;

    3. Написать один (!) запрос, который выведет одновременно список из имен трёх самых молодых студентов, имен трёх самых старых учителей и названий трёх самых продолжительных курсов.

(SELECT name FROM students ORDER BY age DESC LIMIT 3)
UNION
(SELECT name FROM teachers ORDER BY age LIMIT 3);

Задание №2 - Функции и выражения, агрегация данных

    1. Написать запрос для выбора среднего возраста всех учителей с зарплатой более 10 000.

SELECT AVG(age) AS average_age FROM teachers WHERE salary > 10000;

    2. Написать запрос для расчета суммы, сколько будет стоить купить все курсы по дизайну.

SELECT SUM(price) AS total_price FROM courses WHERE type = 'DESIGN';

    3. Написать запрос для расчёта, сколько минут (!) длятся все курсы по программированию.

SELECT SUM(duration) * 60 AS total_duration FROM courses WHERE type = 'PROGRAMMING';

Задание №3 - Группировка, соединение таблиц (JOIN)

    1. Напишите запрос, который выводит сумму, сколько часов должен в итоге проучиться каждый студент (сумма длительности всех курсов на которые он подписан).

    В результате запрос возвращает две колонки: Имя Студента — Количество часов.

SELECT students.name, SUM(courses.duration) AS hours_amount FROM students
JOIN subscriptions ON subscriptions.student_id = students.id
JOIN courses ON subscriptions.course_id = courses.id
GROUP BY name;

    2. Напишите запрос, который посчитает для каждого учителя средний возраст его учеников.

    В результате запрос возвращает две колонки: Имя Учителя — Средний Возраст Учеников.

SELECT teachers.name AS teacher_name, AVG(students.age) AS average_age FROM teachers
JOIN courses ON courses.teacher_id = teachers.id
JOIN subscriptions ON courses.id = subscriptions.course_id
JOIN students ON subscriptions.student_id = students.id
GROUP BY teachers.name;

    3. Напишите запрос, который выводит среднюю зарплату учителей для каждого типа курса (Дизайн/Программирование/Маркетинг и т.д.).

    В результате запрос возвращает две колонки: Тип Курса — Средняя зарплата.

SELECT courses.type as type, AVG(teachers.salary) AS average_salary FROM courses
JOIN teachers ON courses.teacher_id = teachers.id
GROUP BY type;

